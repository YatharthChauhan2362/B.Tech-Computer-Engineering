// The below code is an implementation of the Diffie-Hellman key exchange algorithm. The Diffie-Hellman algorithm is a method for securely exchanging keys over a public communication channel. It allows two parties, in this case referred to as "A" and "B", to independently generate a shared secret key that can then be used for secure communications.

// The code begins by defining a function called "modulo" that calculates (base^exponent) % mod. This function is used to perform modular exponentiation, which is a key component of the Diffie-Hellman algorithm.

// In the main function, two large prime numbers are defined, p and g. These numbers are public and shared by both parties. Next, two private numbers, a and b, are chosen by each party. These numbers are kept private and are not shared with the other party.

// The public keys, A and B, are then generated by taking the modulo of g^a mod p and g^b mod p respectively. 
// The shared secret key, s1 and s2, is generated by taking the modulo of B^a mod p and A^b mod p respectively.

// Finally, the shared secret key is printed to the console. Both parties can use the shared secret key to encrypt and decrypt messages.

// It's worth noting that the values used in this example (p=23, g=5, a=6, b=15) are not considered secure in practice and are only used for illustrative purposes. In real-world scenarios, much larger prime numbers would be used for p and g.

#include <iostream>
#include <cmath>

using namespace std;

// Function to calculate (base^exponent) % mod
long long int modulo(long long int base, long long int exponent, long long int mod)
{
    long long int x = 1;
    long long int y = base;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            x = (x * y) % mod;
        y = (y * y) % mod;
        exponent = exponent / 2;
    }
    return x % mod;
}

int main()
{
    // p and g are public and shared by both parties
    long long int p = 23, g = 5;

    // a and b are private and chosen by each party
    long long int a = 6, b = 15;

    // A and B are the public keys
    long long int A = modulo(g, a, p);
    long long int B = modulo(g, b, p);

    // s is the shared secret key
    long long int s1 = modulo(B, a, p);
    long long int s2 = modulo(A, b, p);

    cout << "Shared Secret Key: " << s1 << endl;
    cout << "Shared Secret Key: " << s2 << endl;

    return 0;
}
